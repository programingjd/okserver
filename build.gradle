buildscript {
  repositories {
    jcenter()
  }
  dependencies {
    classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.4'
    classpath 'org.jsoup:jsoup:1.12.1'
//    classpath 'org.jetbrains.kotlin:kotlin-gradle-plugin:1.2.40'
  }
}

group 'info.jdavid.ok.server'
version '3.14.4.0'

apply plugin: 'java'
//apply plugin: 'kotlin'
apply plugin: 'jacoco'
apply plugin: 'maven-publish'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'idea'

repositories {
  jcenter()
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

println "Java version: ${System.getProperty('java.version')}"

ext {
  bintrayApiKey = new File("$projectDir/local.properties").with {
    it.text.splitEachLine('=', { if (it && it[0] == 'bintrayApiKey') return it[1] })
  }
  println(Runtime.class.getPackage().getImplementationVersion())
  jdkVersion = Runtime.class.getPackage().getImplementationVersion()?.
    replaceFirst('1\\.([78])\\.0_([0-9]+)(?:-[1-9a-z]+)*', '$1.$2')
  println jdkVersion
}

tasks.withType(JavaCompile) {
  if (jdkVersion != null) {
    doFirst {
      String jre6Home =
        System.getProperty('java.home').replaceAll('\\\\', '/').replaceFirst(/1[.][789]/, '1.6')
      if (new File(jre6Home).exists()) {
        options.fork = true
        options.bootClasspath = fileTree(include: ['*.jar'], dir: "${jre6Home}/lib").join(File.pathSeparator)
        options.extensionDirs = "${jre6Home}/lib/ext"
      }
    }
  }
}

tasks.withType(Test) {
  if (jdkVersion != null) {
    doFirst {
      jvmArgs '-Xbootclasspath/p:' + configurations.alpn.files { it.group == 'info.jdavid.alpn' }
    }
  }
}

configurations {
//  coroutinesCompile.extendsFrom compile
//  coroutinesRuntime.extendsFrom runtime
  samplesCompile.extendsFrom compile
  samplesRuntime.extendsFrom runtime
  testRuntime.extendsFrom samplesRuntime
  alpn
  cli
}

sourceSets {
//  coroutines {
//    java {
//      compileClasspath += main.output
//      runtimeClasspath += main.output
//    }
//    kotlin {
//      srcDir file('src/coroutines/kotlin')
//    }
//  }
  samples {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir file('src/samples/java')
    }
    resources {
      srcDir file('src/samples/resources')
    }
  }
  test {
    java {
      compileClasspath += samples.output
      runtimeClasspath += samples.output
    }
  }
}

compileSamplesJava {
  sourceCompatibility = 1.8
  targetCompatibility = 1.8
}

compileTestJava {
  sourceCompatibility = 1.8
  targetCompatibility = 1.8
}

//compileCoroutinesJava {
//  sourceCompatibility = 1.8
//  targetCompatibility = 1.8
//}

dependencies {
  compile 'com.squareup.okio:okio:1.17.3'
  compile 'com.squareup.okhttp3:okhttp:3.14.4'
  compile 'org.slf4j:slf4j-api:1.7.25'
  compileOnly 'com.google.code.findbugs:jsr305:3.0.2'

  jdkVersion?.with { alpn "info.jdavid.alpn:alpn-boot:${it}" }

//  coroutinesCompile 'org.jetbrains.kotlin:kotlin-stdlib'
//  coroutinesCompile 'org.jetbrains.kotlinx:kotlinx-coroutines-core:0.16'
//  coroutinesCompile 'org.jetbrains.kotlinx:kotlinx-coroutines-nio:0.16'

  samplesCompileOnly 'com.google.code.findbugs:jsr305:3.0.2'
  samplesCompile 'info.jdavid.ok.json:okjson:4.3.0'

  testCompile 'junit:junit:4.12'
  testCompile 'info.jdavid.ok.json:okjson:4.3.0'
  testCompile 'net.sourceforge.htmlunit:htmlunit:2.27'
  testCompileOnly 'com.google.code.findbugs:jsr305:3.0.2'
  //testCompile files('c:/progra~1/java/jdk1.8/lib/rt.jar')
  testRuntime 'org.slf4j:slf4j-jdk14:1.7.25'

  cli 'org.slf4j:slf4j-jdk14:1.7.25'
}

task bigJar(type: Jar) {
  archiveName "${project.name}-${project.version}-all.jar"
  from sourceSets.main.output.classesDirs
  from {
    configurations.compile.collect {
      it.isDirectory() ? it : zipTree(it)
    }
  }.exclude "META-INF/**"
  manifest {
    attributes 'Main-Class': 'info.jdavid.ok.server.RequestHandlerChain'
  }
}

jar {
  manifest {
    attributes Sealed: true
  }
  finalizedBy tasks.bigJar
}

jacoco {
  reportsDir = file("$buildDir/jacoco/reports")
}

jacocoTestReport {
  reports {
    xml.enabled true
    csv.enabled false
    html.enabled true
  }
}

//kotlin {
//  experimental {
//    coroutines 'enable'
//  }
//  compileKotlin {
//   kotlinOptions {
//      jdkVersion = '1.8'
//    }
//  }
//}

test {
  String jreHome = System.getProperty('java.home').replaceAll('\\\\', '/')
  if (jdkVersion != null) {
    FileTree bootClasspath = configurations.alpn.asFileTree.plus(
      fileTree(include: ['*.jar'], dir: "${jreHome}/lib")
    )
    setBootstrapClasspath(bootClasspath)
  }
  else {
    jvmArgs '-XX:+IgnoreUnrecognizedVMOptions'
    jvmArgs '--permit-illegal-access'
    jvmArgs '--show-version'
  }
  testLogging {
    showStandardStreams = true
  }
  jacoco {
    append = false
    destinationFile = file("$buildDir/jacoco/jacocoTest.exec")
    classDumpDir = file("$buildDir/jacoco/classpathdumps")
  }
  systemProperty 'https.proptocols', 'TLSv1.2'
  systemProperty 'started-with-gradle', 'true'
  doLast {
    File html = reports.html.entryPoint
    def doc = org.jsoup.Jsoup.parse(html, 'UTF-8')
    int total = doc.select('#tests > .counter').text() as int
    int failed = doc.select('#failures > .counter').text() as int

    def readme = file('README.md')
    def badge = { String label, String text, String color ->
      "https://img.shields.io/badge/_${label}_-_${text}-${color}.png?style=flat"
    }
    String label = 'Tests'
    String text = "${total-failed}/${total}"
    String color = failed == 0 ? 'green' : (failed < 3 ? 'yellow' : 'red')
    String v = project.version
    def download =
      "https://bintray.com/artifact/download/programingjd/maven/info/jdavid/" +
      "ok/server/okserver/$v/okserver-${v}.jar"
    readme.readLines().withIndex().collect { line, i ->
      switch (i) {
        case 0:
          return "![jcenter](${badge('jcenter',v,'6688ff')}) &#x2003; ![jcenter](${badge(label,text,color)})"
        case 9: return "[Download](${download}) the latest jar."
        case 19: return "  <version>${v}</version>"
        case 32: return "  compile 'info.jdavid.ok.server:okserver:${v}'"
        default: return line
      }
    }.join('\n').with { readme.text = it }
  }
  finalizedBy tasks.jacocoTestReport
//  outputs.upToDateWhen { false }
}

task cli(type: JavaExec, dependsOn: classes) {
  //debug true
  main =  'info.jdavid.ok.server.RequestHandlerChain'
  classpath = sourceSets.main.runtimeClasspath
  classpath += files(configurations.cli.files)
}

task javadocJar(type: Jar, dependsOn: javadoc) {
  classifier = 'javadoc'
  from javadoc.destinationDir
}

task sourcesJar(type: Jar, dependsOn: classes) {
  classifier = 'sources'
  from sourceSets.main.allSource
}

//task coroutinesJar(type: Jar, dependsOn: coroutinesClasses) {
//  classifier = 'coroutines'
//  manifest {
//    attributes Sealed: true
//  }
//  from sourceSets.main.output
//  from sourceSets.coroutines.output
//}

//task javadocCoroutinesJar(type: Jar, dependsOn: javadoc) {
//  classifier = 'javadoc'
//  from javadoc.destinationDir
//}

//task sourcesCoroutinesJar(type: Jar, dependsOn: classes) {
//  classifier = 'sources'
//  from sourceSets.main.allSource
//  from sourceSets.coroutines.allSource
//}

artifacts {
  archives sourcesJar, javadocJar
}

publishing {
  publications {
    mavenJava(MavenPublication) {
      groupId project.group
      artifactId 'okserver'
      from components.java
      artifact sourcesJar
      artifact javadocJar
    }
//    mavenJavaCoroutines(MavenPublication) {
//      groupId project.group
//      artifactId 'okserver-coroutines'
//      from components.java
//      artifact sourcesCoroutinesJar
//      artifact javadocCoroutinesJar
//    }
  }
  repositories {
    maven {
      url "$buildDir/repo"
    }
  }
}


bintray {
  user = 'programingjd'
  key = bintrayApiKey
  dryRun = false
  publish = true
  publications = ['mavenJava']
  pkg {
    repo = 'maven'
    name = 'info.jdavid.ok.server'
    websiteUrl = 'https://github.com/programingjd/okserver'
    issueTrackerUrl = 'https://github.com/programingjd/okserver/issues'
    vcsUrl = 'https://github.com/programingjd/okserver.git'
    githubRepo = 'programingjd/okserver'
    githubReleaseNotesFile = 'README.md'
    licenses = ['Apache-2.0']
    labels = ['server','http','okio','okhttp','java']
    publicDownloadNumbers = true
    version {
      name = project.version
      mavenCentralSync {
        sync = false
      }
    }
  }
}

tasks.bintrayUpload.dependsOn tasks.check
